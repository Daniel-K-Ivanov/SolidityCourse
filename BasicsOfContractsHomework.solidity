pragma solidity 0.4.19;

contract BasicsOfContractsHomework {
    
    address owner;
    uint serviceCost;
    uint lastPurchaseTimestamp;
    uint lastWithdraw;
    
    event ServicePurchase(address indexed purchaser, uint timestamp);
    
    function BasicsOfContractsHomework () public {
        owner = msg.sender;
        serviceCost = 1 ether;
        lastPurchaseTimestamp = 0;
        lastWithdraw = 0;
    }
    
    modifier CanPurchaseService  {
        require(msg.value >= serviceCost);
        require(now - lastPurchaseTimestamp > 20);
        _;
    }
    
    modifier IsOwner {
        require(owner == msg.sender);
        _;
    }
    
    modifier CanWithdraw(uint _amount) {
        require(_amount < 5 ether && this.balance > _amount);
        require(now - lastWithdraw > 60);
        _;
    }
    
    function buyService() public payable CanPurchaseService{
        lastPurchaseTimestamp = now;
        ServicePurchase(msg.sender, lastPurchaseTimestamp);
        if (msg.value > serviceCost) {
            msg.sender.transfer(msg.value - serviceCost);
        }
    }
    
    function withdraw(uint256 amount) public IsOwner CanWithdraw(amount) {
        owner.transfer(amount);
        lastWithdraw = now;
    }
    
}
