pragma solidity 0.4.19;

contract MathContract {
    
    int256 a = 0;
    
    function reInitVariable() public {
        a = 0;
    }
    
    function getVariableValue() public returns (int256) {
        return a;
    }
    
    function add(int256 b) public {
        int256 result = a + b;
        assert(result >= a);
        a = result;
    }
    
    function substract(int256 b) public {
        int256 result = a - b;
        assert(result <= a);
        a = result;
    }
    
    function multiply(int256 b) public {
        int256 result = a * b;
        assert(result >= a);
        a = result;
    }
    
    function divide(int256 b) public {
        assert(b != 0);
        a /= b;
    }
    
    function raise(uint256 b) public {
        if (b == 0) {
            a = 1;
        }
        if (a < 0) {
            uint128 temp = uint128(-a);
            assert((temp ** b) != 0);
            if (b % 2 == 0) {
                a = int256(temp ** b);
            } else {
                a = ((int256)(temp ** b)) * (-1);
            }
        } else {
            assert((uint(a) ** b) != 0);
            a = int256(uint(a) ** b);
        }
    }
    
    function divideAndRetrieveDiff(int256 b) public {
        a %= b;
    }
}
