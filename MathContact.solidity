pragma solidity 0.4.19;

contract MathContract {
    
    int256 a = 0;
    
    function reInitVariable() public {
        a = 0;
    }
    
    function getVariableValue() public returns (int256) {
        return a;
    }
    
    function add(int256 b) public {
        int256 result = a + b;
        assert(result >= a);
        a = result;
    }
    
    function substract(int256 b) public {
        int256 result = a - b;
        assert(result <= a);
        a = result;
    }
    
    //TODO if overflow multiple times?
    function multiply(int256 b) public {
        int256 result = a * b;
        assert(result >= a);
        a = result;
    }
    
    function divide(int256 b) public {
        assert(b != 0);
        a /= b;
    }
    
    //TOOD check for overflow
    function raise(uint256 b) public {
        
        //a = a ** b;
    }
    
    function divideAndRetrieveDiff(int256 b) public {
        a %= b;
    }
}
