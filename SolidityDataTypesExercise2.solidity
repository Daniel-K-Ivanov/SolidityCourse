pragma solidity ^0.4.19;

contract SolidityDataTypesExercise2 {
   
    struct Proposal {
        uint proposionTimestamp;
        uint amount;
        
        address receiver;
    }
    
    address[] public owners;
    Proposal public proposal;
    uint public nextToVote;
    
    modifier onlyOwners {
        //Antipattern
        bool isOwner = false;
        for (uint i = 0; i < owners.length; i++) {
            if (owners[i] == msg.sender) {
                _;
                break;
            }
        }
    }
    
    function () public payable {
    }
    
    function SolidityDataTypesExercise2 (address[] _owners) public {
        owners = _owners;
    }
    
    function propose(uint _amount, address _receiver) public onlyOwners {
        proposal = Proposal({proposionTimestamp : now, amount : _amount, receiver : _receiver});
        nextToVote = 0;
    }
    
    function accept() public onlyOwners {
        require(proposal.proposionTimestamp != 0);
        require(nextToVote < owners.length);
        require(owners[nextToVote] == msg.sender);
        require(now - proposal.proposionTimestamp < 5 minutes);
        require(this.balance >= proposal.amount);
        
        nextToVote++;
        if (nextToVote == owners.length) {
            proposal.receiver.transfer(proposal.amount);
        }
    }
}
