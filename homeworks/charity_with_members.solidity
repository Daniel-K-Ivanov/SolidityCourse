pragma solidity ^0.4.19;

library MemberUtils {
    
    struct Member {
        address adr;
        uint lastDonationTimestamp;
        uint lastDonationValue;
        uint totalDonations;
        bool isValue;
    }
    
    struct MembersData {
        mapping (address => Member) members;
        uint numberOfMembers;
    }
   
    //Adds new member if not member already
    //Increases the number of members
    //Sets lastDonationTimestamp to now, so that the first 1 hour starts counting at the moment of becoming member
    
    function addNewMember (MembersData storage self, address adr) internal returns (bool) {
        if (self.members[adr].isValue) {
            return false;
        }
        self.members[adr] = Member({adr : msg.sender, lastDonationTimestamp : now, lastDonationValue : 0, totalDonations : 0, isValue : true});
        self.numberOfMembers++;
        return true;
    }
    
    //Deletes member
    //Decreases the number of members
    
    function removeMember (MembersData storage self, address adr) internal {
        delete self.members[adr];
        self.numberOfMembers--;
    }
    
    //Returns true if an address is a member
    
    function isMember (MembersData storage self, address adr) internal view returns (bool) {
        return self.members[adr].isValue;
    }
    
    //Returns true if a member has donated in the last 1 hour
    
    function hasDonated (MembersData storage self, address adr) internal view returns (bool) {
        return now - self.members[adr].lastDonationTimestamp < 1 hours;
    }
    
    //Adds donation info for a member
    
    function addDonation (MembersData storage self, address adr, uint value) internal {
        self.members[adr].lastDonationTimestamp = now;
        self.members[adr].lastDonationValue = value;
        self.members[adr].totalDonations += value;
    }
}

library Voting {
    
    struct Vote {
        address pendingMemberAdr;
        uint approvals;
        bool isVoteOpen;
        mapping(bytes32 => bool) votingHistory;
        uint conductedVotings;
    }
    
    //Returns if a Voting for new member is currently open
    
    function isVotingOpen (Vote storage self) internal view returns(bool) {
        return self.isVoteOpen;
    }
    
    //Creates a vote for new member and increases the number of conducted votes so far    
    
    function proposeMember (Vote storage self, address _adr) internal {
        assert(!isVotingOpen(self));
        self.pendingMemberAdr = _adr;
        self.approvals = 0;
        self.conductedVotings++;
        self.isVoteOpen = true;
    }
    
    //Getter for the address of the member for which it is beeing voted 
    
    function isPendingMember (Vote storage self, address _adr) internal view returns (bool) {
        return self.pendingMemberAdr == _adr;
    }
    
    
    //Checks that voting is open and that a voter did not voted in this voting
    //Increases the approvals and marks the voter as voted
    
    function vote (Vote storage self, address voter) internal returns (uint) {
        bytes32 key = keccak256(voter, self.conductedVotings);
        assert(isVotingOpen(self) && !self.votingHistory[key]);
        
        self.approvals++;
        self.votingHistory[key] = true;
        return self.approvals;
    }
    
    //Checks that voting is open
    //Clears the vote data and increases the conductedVotings
    
    function resetVoteData (Vote storage self) internal {
        assert(isVotingOpen(self));
        delete self.pendingMemberAdr;
        self.approvals = 0;
        self.isVoteOpen = false;
        self.conductedVotings++;
    }
}

contract Owned {
    address owner;
    
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
    function Owned () public {
        owner = msg.sender;
    }
    
}

contract Charity is Owned {
    
    using MemberUtils for MemberUtils.MembersData;
    using Voting for Voting.Vote;
    
    MemberUtils.MembersData public members;
    Voting.Vote vote;
    
    modifier onlyMember {
        require(members.isMember(msg.sender));
        _;
    }
    
    modifier isNotMember (address adr) {
        require(!members.isMember(adr));
        _;
    }
    
    modifier isPendingMember (address _adr) {
        require(vote.isPendingMember(_adr));
        _;
    }
    
    //Receives donations and records them
    
    function() public payable {
        if (members.isMember(msg.sender) && isMembershipActive(msg.sender)) {
            members.addDonation(msg.sender, msg.value);
        }
    }
    
    //Constructor, adding the owner as a first member
    
    function Charity () public {
        members.addNewMember(msg.sender);
    }
    
    //Checks that there is no current voting 
    //Checks that the member has active membership (donated in the last 1 hour)
    //Creates new voting for a member
    
    function proposeNewMember(address adr) public onlyMember isNotMember(adr) {
        require(!vote.isVotingOpen());
        assert(isMembershipActive(msg.sender));
        
        vote.proposeMember(adr);
    }
    
    //Removes member, executed only by the owner
    //The owner cannot remove himself
    
    function removeMember (address adr) public onlyOwner {
        assert(msg.sender != owner);
        members.removeMember(adr);
    }
    
    //Checks that a voting for a new member is open
    //Votes for the specified member
    //If the votes are enough, the vote closes and the address is added as a member
    
    function voteForPendingMember (address adr) public onlyMember isPendingMember(adr) {
        require(vote.isVotingOpen());
        
        uint votes = vote.vote(msg.sender);
        if (2 * votes > members.numberOfMembers) {
            vote.resetVoteData();
            members.addNewMember(adr);
        }
    }
    
    //Destroys the contact
    
    function kill () public onlyOwner {
        selfdestruct(this);
    }
    
    //internal helper function
    //Checks if a member has donated and if not, it is been removed (excluding the owner)
    
    function isMembershipActive (address adr) internal returns (bool) {
        if (!members.hasDonated(adr) && adr != owner) {
            members.removeMember(adr);
            return false;
        }
        return true;
    }
}
