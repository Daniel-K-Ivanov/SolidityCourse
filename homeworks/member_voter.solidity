pragma solidity ^0.4.19;

contract Owned {
    address owner;
    
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
    function Owned () public {
        owner = msg.sender;
    }
}

contract Destructible is Owned {
    
    function () public payable { }
    
    function Destructible () public { }
    
    function destroy() public onlyOwner {
        selfdestruct(owner);
    }
    
    function destroyAndSend (address recipient) public onlyOwner {
        selfdestruct(recipient);
    }
}

library SafeMath {
    
    function add(uint a, uint b) public pure returns (uint) {
        uint c = a + b;
        assert(c >= a);
        return c;
    }
    
    function sub (uint a, uint b) public pure returns (uint) {
        assert(b <= a);        
        return a - b;
    }
    
    function mul (uint a, uint b) public pure returns (uint) {
        if (a == 0) {
            return 0;
        }
        
        uint c = a * b;
        assert(c /a == b);
        return c;
    }
}

library MemberLib {
    
    using SafeMath for uint;
    
    struct Member {
        address adr;
        uint lastDonation; // Last donation timestamp
        uint lastValue; //Last donation in wei 
        uint total; //Total donated value in wei
    }
    
    function initializeMember (Member storage self, address _adr) public {
        self.adr = _adr;
        self.lastDonation = now;
    }
    
    //Delete member
    function remove (Member storage self) public {
        self.adr = 0;
    }
    
    //Return true if a member has donated in the last 1 hour
    function hasDonated (Member storage self) public view returns (bool) {
        return now - self.lastDonation < 1 hours;
    }
    
    //Update member data
    function updateDonation (Member storage self, uint value) public {
        self.lastDonation = now;
        self.lastValue = value;
        self.total.add(value);
    }
}

library Voting {
    
    using SafeMath for uint;
    
    struct Vote {
        address proposedMember;
        uint voteFor;
        uint voteAgainst;
        mapping(address => bool) voted;
    }
    
    //initializes new vote for member    
    function initializeVote (Vote storage self, address _adr) public {
        self.proposedMember = _adr;
        self.voteFor = 0;
        self.voteAgainst = 0;
    }
    
    //Checks that a voter did not voted in this voting
    //Increases the votes and marks the voter as voted
    function vote (Vote storage self, address _voter, bool _voteFor) public {
        require(!self.voted[_voter]);
        
        self.voted[_voter] = true;
        if (_voteFor) {
            self.voteFor.add(1);
        } else {
            self.voteAgainst.add(1);
        }
    }
    
    function clearVote (Vote storage self) public {
        self.proposedMember = address(0);
    }
}

contract MemberVoter is Owned, Destructible {
    
    using SafeMath for uint;
    using MemberLib for MemberLib.Member;
    using Voting for Voting.Vote;

    mapping (address => MemberLib.Member) public members;
    mapping (bytes32 => Voting.Vote) public votings;
    
    uint membersCount;
    uint activeVotings;
    
    event LogNewMemberProposal(address indexed _adr);
    event LogMemberApproved(address indexed _adr);
    event LogMemberRejected(address indexed _adr);
    event LogMemberRemoval(address indexed _adr);
    event LogNewDonation(address indexed _adr, uint _value);

    modifier onlyMember (address _adr) {
        require(members[_adr].adr != 0);
        if (!_canRemoveMember(members[_adr])) {
            _;
        }
    }
    
    modifier isNotMember (address _adr) {
        require(members[_adr].adr == 0);
        _;
    }
    
    function MemberVoter () public {
        _addMember(msg.sender);
    }
    
    function _canRemoveMember(MemberLib.Member storage member) internal returns (bool) {
        if (activeVotings == 0 && member.adr != owner && !member.hasDonated()) {
            _removeMember(member);
            return true;
        }
        return false;
    }
    
    function _addMember (address _adr) internal {
        members[_adr].initializeMember(_adr);
        membersCount.add(1);
        LogMemberApproved(_adr);
    }
    
    function _removeMember (MemberLib.Member storage member) internal {
        member.remove();
        membersCount.sub(1);
        LogMemberRemoval(member.adr);
    }
    
    function _clearVoting (Voting.Vote storage vote) internal {
        vote.clearVote();
        activeVotings.sub(1);
    }
    
    // Checks that the member has active membership (donated in the last 1 hour)
    // Creates new voting for a member
    function proposeMember(address _adr) public onlyMember(msg.sender) isNotMember(_adr) returns (bytes32) {
        require(members[msg.sender].hasDonated());
        
        bytes32 voteID = keccak256(_adr, now);
        votings[voteID].initializeVote(_adr);
        activeVotings.add(1);
        
        LogNewMemberProposal(_adr);
        return voteID;
    }
    
    //Removes member, executed only by the owner
    //The owner cannot remove himself
    function removeMember(address _adr) public onlyOwner {
        require(msg.sender != owner);
        _removeMember(members[_adr]);    
    }
    
    //Votes for the specified member
    //If the votes are enough, a decision is made - Approved or rejected
    function vote (bytes32 votingID, bool _voteFor) public onlyMember(msg.sender) {
        Voting.Vote storage voting = votings[votingID];
        require(voting.proposedMember != address(0));
        
        voting.vote(msg.sender, _voteFor);
        if (_voteFor && voting.voteFor.mul(2) >= membersCount) {
            _addMember(voting.proposedMember);
            _clearVoting(voting);
        } else if (!_voteFor && voting.voteAgainst.mul(2) >= membersCount) {
            LogMemberRejected(voting.proposedMember);
            _clearVoting(voting);
        }
    }
    
    function donate () public payable onlyMember(msg.sender) {
        require(msg.value != 0);
        members[msg.sender].updateDonation(msg.value);
        LogNewDonation(msg.sender, msg.value);
    }
}
